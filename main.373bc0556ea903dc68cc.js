(self.webpackChunkscrollytelling_template=self.webpackChunkscrollytelling_template||[]).push([[179],{33603:(e,t,n)=>{"use strict";var a=n(40207),r=n(67294);function i(e){var t=Array.from(String(e.optionData.authors).split(",")).map((function(t,n){var a=Array.from(String(e.optionData.authors).split(",")).length;return a>2?n===a-2?r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)," et "):n===a-1?r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)):r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t),", "):1===a?r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)):0===n?r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t)," et "):r.createElement("span",{key:n},r.createElement("a",{href:"".concat(String(e.optionData.urls).split(",")[n])},t))})),n=r.createElement("section",{className:"intro-section ".concat(e.classes)},r.createElement("h1",null,e.optionData.title),r.createElement("address",null,r.createElement("div",{className:"authors"},"Par ",t),r.createElement("div",{className:"date"},e.optionData.date)),r.createElement("p",null,e.amorce));return e.background?r.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},n):n}var s=n(25935);function c(e){var t,n=String(e.classes).includes("citation");n&&(t={text:String(e.texts).split("/")[0],author:String(e.texts).split("/")[1]});var a,i=String(e.classes).includes("bigNumber");i&&(a={number:String(e.texts).split("/")[0],underText:String(e.texts).split("/")[1]});var c=e.visual,o=""!==c?"Photo"===e.visual?r.createElement("img",{key:"photoTextSection_".concat(e.id),id:"photoTextSection_".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses),style:{paddingBottom:"1rem"}}):"Video"===e.visual?r.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"videoTextSection_".concat(e.id),id:"videoTextSection_".concat(e.id)},r.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):r.createElement("div",null):r.createElement("div",null),l=r.createElement("section",{className:"text-section ".concat(e.classes)},n?r.createElement("blockquote",{className:"small"},r.createElement("div",null,r.createElement("p",null,r.createElement("b",null,(0,s.ZP)(t.text))),r.createElement("p",{className:"author"},t.author),r.createElement("div",{className:"symbol"}))):i?r.createElement("div",{className:"container-number"},r.createElement("div",{className:"numbers"},r.createElement("h2",null,a.number),r.createElement("small",null,a.underText))):r.createElement("div",null,c?o:r.createElement("div",null),String(e.texts).startsWith("<")?(0,s.ZP)(e.texts):r.createElement("p",null,(0,s.ZP)(e.texts))));return e.background?r.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},l):l}var o,l=n(45697),u=n.n(l),m=["title","src"];function p(){return p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},p.apply(this,arguments)}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function f(e){var t,n,a=e.title,i=e.src,s=function(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}(e,m),c=(0,r.useRef)(),o=(t=(0,r.useState)(500),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,i=[],s=!0,c=!1;try{for(n=n.call(e);!(s=(a=n.next()).done)&&(i.push(a.value),!t||i.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{s||null==n.return||n.return()}finally{if(c)throw r}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=o[0],u=o[1],f=(0,r.useCallback)((function(e){var t=e.data,n=void 0===t?{}:t;e.source===c.current.contentWindow&&"string"!=typeof n&&n["datawrapper-height"]}),[u,c]);return(0,r.useEffect)((function(){return window.addEventListener("message",f),function(){return window.removeEventListener("message",f)}}),[l,u,f]),r.createElement("iframe",p({ref:c,scrolling:"no",frameBorder:"0",width:"100%"},s,{title:a,src:i,height:l}))}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}f.propTypes={title:u().string.isRequired,src:u().string.isRequired,loading:u().oneOf(["eager","lazy"])};var y="intro-titre",h="pleine-page-titre",g="texte-classique",b="viz-section",E="centré",x="Photo",w="Video",k="Visualisation",S="iframe",T=(v(o={titre:"Titre",auteurs:"Auteurs",date:"Date"},"date","Date"),v(o,"urls","LienAuteurs"),v(o,"lienfichiersource","LienFichierSource"),o);function I(e){var t,n,a,i=r.createElement("section",{id:e.listID,className:e.classed},r.createElement("div",{className:"steps ".concat((t=e.steps,n=t.map((function(e,t){return e.stepclasses})),a=new Array(n.length),n.forEach((function(e,t){if(Array.isArray(e))e.forEach((function(e){for(var r=t;r<n.length;r++)n[r].includes(e)&&(a[r]=e)}));else if("string"==typeof e)for(var r=t;r<n.length;r++)n[r].includes(e)&&(a[r]=e)})),a.reduce((function(e,t){return e===t&&""!==e&&""!==t?e:""}))))},e.steps.map((function(e,t){var n,a=String(e.stepclasses).includes("citation");return a&&(n={text:String(e.text).split("/")[0],author:String(e.text).split("/")[1]}),r.createElement("section",{key:t,className:e.stepclasses+" "+e.scrollType},a?r.createElement("blockquote",{className:"small"},r.createElement("div",null,r.createElement("p",null,r.createElement("b",null,(0,s.ZP)(n.text))),r.createElement("p",{className:"author"},n.author),r.createElement("div",{className:"symbol"}))):String(e.text).startsWith("<")?(0,s.ZP)(e.text):r.createElement("p",null,e.text?(0,s.ZP)(e.text):""))}))),r.createElement("div",{className:"viz",id:"viz"},e.steps.map((function(t,n){return t.visual===x?r.createElement("img",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),src:"assets/img/675/".concat(t.filename),"data-srcset":"assets/img/2048/".concat(t.filename," 2048w, assets/img/990/").concat(t.filename," 990w, assets/img/675/").concat(t.filename," 675w, assets/img/1350/").concat(t.filename," 1350w, assets/img/100/").concat(t.filename," 100w, assets/img/495/").concat(t.filename," 495w, assets/img/1024/").concat(t.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(t.visuelclasses)}):t.visual===w?r.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(t.visuelclasses),preload:"metadata",key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n)},r.createElement("source",{src:"assets/videos/".concat(t.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):t.visual===S?r.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer"},r.createElement(f,{title:"Mesures d'arsenic",src:"".concat(t.filename)})):t.visual===k?r.createElement("div",{key:"".concat(e.listID,"_").concat(n),id:"".concat(e.listID,"_").concat(n),className:"iframeContainer"}):void 0}))));return e.background?r.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},i):i}function D(e){var t=r.createElement("section",{className:"full-page-section ".concat(e.classes)},r.createElement("div",{className:"titleImage"},e.filename?"Photo"===e.visual?r.createElement("img",{key:"".concat(e.id),id:"".concat(e.id),src:"assets/img/675/".concat(e.filename),"data-srcset":"assets/img/2048/".concat(e.filename," 2048w, assets/img/990/").concat(e.filename," 990w, assets/img/675/").concat(e.filename," 675w, assets/img/1350/").concat(e.filename," 1350w, assets/img/100/").concat(e.filename," 100w, assets/img/495/").concat(e.filename," 495w, assets/img/1024/").concat(e.filename," 1024w"),"data-sizes":"(max-width: 100px) 100px, (max-width: 495px) 495px, (max-width: 675px) 675px, (max-width: 990px) 990px, (max-width:  1024px) 1024px, (max-width:  1350px) 1350px, (max-width:  2048px) 2048px",className:"lazy ".concat(e.visuelclasses)}):"Video"===e.visual?r.createElement("video",{autoPlay:!0,loop:!0,muted:!0,playsInline:!0,className:"video ".concat(e.visuelclasses),preload:"metadata",key:"".concat(e.id),id:"".concat(e.id)},r.createElement("source",{src:"assets/videos/".concat(e.filename)}),"Vidéo non supportée. Ré-essayez sur un autre appareil ou fureteur."):r.createElement("div",null):r.createElement("div",null),e.filename?r.createElement("div",{className:"filter"}):r.createElement("div",null)),r.createElement("div",{className:"captionholder"},r.createElement("h2",{className:"caption ".concat(e.mainTitle.class)},e.mainTitle.text),e.subTitle?r.createElement("h3",{className:"caption ".concat(e.subTitle.class)},e.subTitle.text):r.createElement("div",null)));return e.background?r.createElement("div",{style:{backgroundColor:"".concat(e.background)},className:"sectionContainer"},t):t}n(93162);var N=n(26355);function A(e,t){var n={},a=[],r={title:t[0][T.titre],authors:t[0][T.auteurs],urls:t[0][T.urls],date:t[0][T.date]};return e.map((function(e,t){if(e.Section===y){var i=e.StepClasses,s=e.TEXTE,c=e.StyleFond;n[e.SectionID]={key:t,sectionType:y,optionData:r,amorce:s,background:c,classes:z(i)}}else if(e.Section===g){var o=e.TEXTE,l=e.StepClasses,u=e.StyleFond;n[e.SectionID]={key:t,sectionType:g,texts:o,visual:e.VISUEL,filename:e.NomFichierSource,background:u,classes:z(l),visuelclasses:z(e.VisuelClasses)}}else if(e.Section===h){var m=e.TEXTE;O(e.TEXTE)&&(m=JSON.parse(e.TEXTE)),n[e.SectionID]={key:t,sectionType:h,texts:O(e.TEXTE)?m:{mainTitle:{class:"",text:m},subTitle:null},visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,classes:z(e.StepClasses),visuelclasses:z(e.VisuelClasses)}}else if(e.Section===b){var p={attributs:e.Attributs,scrollType:e.Step,text:e.TEXTE,visual:e.VISUEL,filename:e.NomFichierSource,background:e.StyleFond,visuelclasses:z(e.VisuelClasses),stepclasses:z(e.StepClasses)};if(n.hasOwnProperty(e.SectionID)){var d=n[e.SectionID];d.push(p),n[e.SectionID]=d}else n[e.SectionID]=[p],a.push(e.SectionID)}})),a.map((function(e){var t=n[e],a=t[0].attributs===E?" full-page":"",r=t[0].background;n[e]={key:e,sectionType:b,listID:e,steps:t,classed:"viz-section".concat(a),mediaInfo:0,background:r}})),Object.values(n)}function C(e,t){var n=A(e,t),a=[];return n.map((function(e){if("viz-section"===e.sectionType){var t=[];e.steps.map((function(n,a){var r=function(){};if(""!==n.visual){var i=Array(e.steps.length).fill(null).map((function(e,t){return t})).filter((function(e){return e!==a})).map((function(t){return"#".concat(e.key,"_").concat(t)})).join(",");r=function(){N.Ys("#".concat(e.key,"_").concat(a)).transition().style("opacity",1).style("display",null),""!==i&&N.td_("".concat(i)).transition().style("opacity",0).style("display","none")}}else if(String(n.filename).startsWith("TAGID")){var s=String(n.filename).split("=")[1],c=parseInt(s.split("_")[1]),o=Array(e.steps.length).fill(null).map((function(e,t){return t})).filter((function(e){return e!==c})).map((function(t){return"#".concat(e.key,"_").concat(t)})).join(",");r=function(){N.Ys("#".concat(s)).transition().style("opacity",1).style("display",null),""!==o&&N.td_("".concat(o)).transition().style("opacity",0).style("display","none")}}t.push(r)})),a.push(t)}})),a}function O(e){try{JSON.parse(e)}catch(e){return!1}return!0}function z(e){return Array.from(e.split(";")).join(" ")}function _(e,t,n,a,r,i,s){try{var c=e[i](s),o=c.value}catch(e){return void n(e)}c.done?t(o):Promise.resolve(o).then(a,r)}function P(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var i=e.apply(t,n);function s(e){_(i,a,r,s,c,"next",e)}function c(e){_(i,a,r,s,c,"throw",e)}s(void 0)}))}}function j(e,t){return L.apply(this,arguments)}function L(){return(L=P(regeneratorRuntime.mark((function e(t,n){var a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:R(t,n),a=C(t,n),e.next=5;break;case 5:return e.abrupt("return",a);case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function R(e,t){A(e,t).map((function(e){"viz-section"===e.sectionType&&e.steps.map((function(t,n){""!==t.visual&&(0===n?N.Ys("#".concat(e.key,"_").concat(n)).style("opacity",1):N.Ys("#".concat(e.key,"_").concat(n)).style("opacity",0))}))}))}function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function V(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var U=function(){function e(t,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.el=t,this.index=n,this.callback=a,this._isActivate=!1}var t,n;return t=e,(n=[{key:"activate",value:function(e){this._isActivate||(this._isActivate=!0,this.el.classList.add("active"),this.callback(e))}},{key:"deactivate",value:function(){this._isActivate&&(this._isActivate=!1,this.el.classList.remove("active"))}}])&&V(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),F=n(52732),M=n.n(F),W=n(89438);function Y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function Z(e,t){var n=[];[".viz",".full-page-section > img",".full-page-section > video"].forEach((function(e){n=n.concat(Array.from(document.querySelectorAll(e)))})),(0,W.Z)(n,{stickyBitStickyOffset:40}),new(M())({elements_selector:".lazy",threshold:500}),Promise.all([j(e,t)]).then((function(e){var t,n;(function(e){var t=0,n=0,a=window.innerHeight,r=!1,i=0,s=[],c=[],o=[],l=document.querySelector(".article-reminder"),u=document.querySelector("header > .progress"),m=document.querySelector(".intro-section h1"),p=document.querySelectorAll(".viz-section");if(p.length!==e.length)throw new Error("The number of viz sections (".concat(p.length,") mismatch with the length of the first ")+"dimension of the callbacks array (".concat(e.length,"). Please, be sure that the two elements ")+"have the same size.");p.forEach((function(t,n){var a,r=function(e){if(Array.isArray(e))return q(e)}(a=t.querySelectorAll("section"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(a)||function(e,t){if(e){if("string"==typeof e)return q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?q(e,t):void 0}}(a)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();if(r.length!==e[n].length)throw new Error("The number of steps (".concat(r.length,") in the viz section #").concat(n+1," mismatch with the ")+"number of callbacks specified (".concat(e[n].length,') at the index "').concat(n,'". Please, be sure that the two ')+"elements have the same size.");s=s.concat(r.map((function(t,a){return new U(t,"".concat(n,"-").concat(a),e[n][a])}))),c=c.concat(c,t.querySelector(".viz > *"))}));var d=function(){var e=window.pageYOffset||document.documentElement.scrollTop;s.forEach((function(e){var r=e.el.getBoundingClientRect();a-r.top-n>0&&r.top+r.height-t>0?o.push(e):e.deactivate()}));var r=m.getBoundingClientRect().bottom<=0,c=l.classList.contains("visible");r&&!c?l.classList.add("visible"):!r&&c&&l.classList.remove("visible"),o.forEach((function(t,n){e>=i?n===o.length-1?t.activate("down"):t.deactivate():0===n?t.activate("up"):t.deactivate()})),f(),o=[],i=e},f=function(){var e=(document.body.scrollTop||document.documentElement.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight)*100;u.style.width=e+"%"},v={initialize:function(){if(r)throw new Error("The scroller is already initialized.");return r=!0,window.addEventListener("scroll",d),window.addEventListener("resize",(function(){a=window.innerHeight,f()})),(window.pageYOffset||document.documentElement.scrollTop)>0&&d(),f(),v},offsetTop:function(e){if(void 0===e)return t;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return t=e,v},offsetBottom:function(e){if(void 0===e)return n;if(!Number.isInteger(e))throw new Error("The offset must be an integer number.");return n=e,v}};return v})((t=e,n=1,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,r,i=[],s=!0,c=!1;try{for(n=n.call(e);!(s=(a=n.next()).done)&&(i.push(a.value),!t||i.length!==t);s=!0);}catch(e){c=!0,r=e}finally{try{s||null==n.return||n.return()}finally{if(c)throw r}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return Y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Y(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0]).offsetTop(40).offsetBottom(0).initialize()}))}function B(e){return e.rendered&&(0,r.useEffect)((function(){Z(e.contentData,e.paramsData)}),[]),t=A(e.contentData,e.paramsData),n={},Object.keys(t).map((function(e,a){var o=t[e];o.sectionType===y?n[e]=r.createElement(i,{key:o.key,sectionType:o.sectionType,optionData:o.optionData,amorce:(0,s.ZP)(o.amorce),background:o.background,classes:o.classes}):o.sectionType===g?n[e]=r.createElement(c,{key:o.key,id:o.key,sectionType:o.sectionType,texts:o.texts,background:o.background,classes:o.classes,visuelclasses:o.visuelclasses,visual:o.visual,filename:o.filename}):o.sectionType===h?n[e]=r.createElement(D,{key:o.key,id:o.key,sectionType:o.sectionType,background:o.background,classes:o.classes,visuelclasses:o.visuelclasses,visual:o.visual,mainTitle:o.texts.mainTitle,subTitle:o.texts.subTitle,filename:o.filename}):o.sectionType===b&&(n[e]=r.createElement(I,{key:o.key,listID:o.listID,steps:o.steps,classed:o.classed,mediaInfo:o.mediaInfo,background:o.background}))})),Object.values(n);var t,n}Promise.all([n.e(216).then(n.t.bind(n,20745,19)),n.e(216).then(n.t.bind(n,97762,19)),Promise.resolve().then(n.t.bind(n,67294,19))]).then((function(e){var t=e[0],n=(e[1],e[2]);N.Ys(".pull-right").insert("li","li").html("<p class='not-published'>Ne pas publier</p>"),N.gyn(a.google_config.contentURL).then((function(e){N.gyn(a.google_config.paramsURL).then((function(a){t.createRoot(document.getElementById("root")).render(n.createElement(B,{contentData:e,paramsData:a,rendered:!0})),document.querySelector("#footerContainer").innerHTML=N.Ys("#footerContent").node().innerHTML}))}))}))},40207:e=>{e.exports={google_config:{contentURL:"https://docs.google.com/spreadsheets/d/1MF7OMK5-CTsozAT3ba-gZlkWTxqC0o6QzWWTL-g4C1Y/pub?gid=0&single=true&output=csv",paramsURL:"https://docs.google.com/spreadsheets/d/1MF7OMK5-CTsozAT3ba-gZlkWTxqC0o6QzWWTL-g4C1Y/pub?gid=409950237&single=true&output=csv",localContentURL:"./data/structure/contentData.csv",localParamsURL:"./data/structure/paramsData.csv"}}}},e=>{var t=t=>e(e.s=t);e.O(0,[216],(()=>(t(28594),t(35666),t(33603)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,